cmake_minimum_required(VERSION 2.8)

PROJECT(dmecho)

LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

IF (WIN32)
    MESSAGE(STATUS "Now is windows")

    SET(DMOS_NAME "win")

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
    IF(MSVC)
        ADD_DEFINITIONS(/bigobj)
        ADD_COMPILE_OPTIONS(/W3 /wd4005 /wd4068 /wd4244 /wd4267 /wd4800)
        ADD_DEFINITIONS(/DNOMINMAX /DWIN32_LEAN_AND_MEAN=1 /D_CRT_SECURE_NO_WARNINGS /D_SCL_SECURE_NO_WARNINGS)
        IF (MSVC_VERSION GREATER_EQUAL 1900)
            INCLUDE(CheckCXXCompilerFlag)
            CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
            IF (_cpp_latest_flag_supported)
                ADD_COMPILE_OPTIONS("/std:c++latest")
            ENDIF()
    	ENDIF()
    ENDIF()
ELSEIF (APPLE)
    MESSAGE(STATUS "Now is Apple systems")  

    SET(DMOS_NAME "mac") 

    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )
ELSEIF (UNIX)
    MESSAGE(STATUS "Now is UNIX-like OS")  
 
    SET(DMOS_NAME "lin") 
    
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread" )    
ENDIF ()

ADD_DEFINITIONS(-DUSE_DMECHO)

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/client)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/server)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)

LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)

FILE(GLOB_RECURSE DMSOCKET_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/*.h
)

FILE(GLOB_RECURSE DMECHOCLIENT_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/client/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/client/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/client/*.c
${CMAKE_CURRENT_SOURCE_DIR}/client/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/client/*.h)

FILE(GLOB_RECURSE DMECHOSERVER_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/server/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/server/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/server/*.c
${CMAKE_CURRENT_SOURCE_DIR}/server/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/server/*.h)

ADD_LIBRARY(dmsocket STATIC ${DMSOCKET_SOURCES})

ADD_EXECUTABLE(dmechoclient ${DMECHOCLIENT_SOURCES})
TARGET_LINK_LIBRARIES(dmechoclient dmsocket)

ADD_EXECUTABLE(dmechoserver ${DMECHOSERVER_SOURCES})
TARGET_LINK_LIBRARIES(dmechoserver dmsocket)

#ADD_CUSTOM_COMMAND(
#TARGET dmechotest
#PRE_BUILD
#COMMAND ${CMAKE_COMMAND} -E copy_if_different
#${CMAKE_CURRENT_SOURCE_DIR}/config/test.csv
#$<TARGET_FILE_DIR:dmechotest>
#)

#INSTALL(DIRECTORY include/ DESTINATION include)
#INSTALL(TARGETS dmecho
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib)

#SET(DMECHO_LIBS "dmecho")
#MARK_AS_ADVANCED(${DMECHO_LIBS})